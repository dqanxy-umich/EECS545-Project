# -*- coding: utf-8 -*-
"""halp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jLw4_7EQsbIKzIiBzDP7drtdo4l1L_Fv
"""

pip install umap-learn

# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o8dq_jQXTDcSGwBfFnCEYI-EIxF_jnG0
"""

# ICA Testing
import scipy.io
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
import torch.nn.functional as F
import random
import umap
from scipy import signal
from sklearn.decomposition import PCA, FastICA
from torch.utils.data import DataLoader, sampler, TensorDataset 

def power(data,label):
  N=label.shape[0]
  channel=data.shape[1]
  pointer=0
  newlabel=np.zeros(1)
  powerdata=np.zeros(channel)
  for i in range(N):
    if (i+1)==N:
      newlabel=np.hstack((newlabel,label[i]))
      temp=data[pointer:i,:]
      temp=np.linalg.norm(temp,axis=0)
      powerdata=np.vstack((powerdata,temp**2/(i-pointer)))
    elif label[i+1]!=label[i]:
      newlabel=np.hstack((newlabel,label[i]))
      temp=data[pointer:i,:]
      temp=np.linalg.norm(temp,axis=0)
      powerdata=np.vstack((powerdata,temp**2/(i-pointer)))
      pointer=i
  data=powerdata[1:,:]
  label=newlabel[1:]
  data,label=torch.from_numpy(data).float(),torch.from_numpy(label).long()
  return data,label

def uniform(data):
  um=umap.UMAP(n_components=30,n_neighbors=15,min_dist=0.1)
  data=um.fit_transform(data)
  return data

def principle(data):
  pca=PCA(n_components=30)
  data=pca.fit_transform(data)
  return data


def data_process(data,group):
  data=data['data']
  group=group['stim']
  #b,a = signal.butter(4, (80.1,80.5),'bandpass',fs=1000)
  #data = signal.filtfilt(b,a,data.T)
  data = data
  index,_=np.where(group>0)
  train = data[index,:]
  trainlabel=group[index,0]
  # Channel delete
  #train=uniform(train)
  trainlabel=trainlabel-1
  train,trainlabel=torch.from_numpy(train).float(),torch.from_numpy(trainlabel).long()
  return train[30000:],trainlabel[30000:]

# Load data and Preprocess 
data = scipy.io.loadmat('drive/MyDrive/train/bp_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/bp_stim.mat')
bp,bplabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/ht_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/ht_stim.mat')
ht,htlabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/jp_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/jp_stim.mat')
jp,jplabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/wc_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/wc_stim.mat')
wc,wclabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/zt_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/zt_stim.mat')
zt,ztlabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/jc_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/jc_stim.mat')
jc,jclabel=data_process(data,group)
data = scipy.io.loadmat('drive/MyDrive/train/mv_data.mat')
group = scipy.io.loadmat('drive/MyDrive/train/mv_stim.mat')
test,testlabel=data_process(data,group)

#ICA
def ICA(data):
  ica = FastICA(n_components=20,tol=.0001, max_iter = 200)
  data = ica.fit_transform(data)
  return data

#Plot original data
plt.plot(range(ht.shape[0]),ht[:,0])

plt.plot(range(ht.shape[0]),htlabel[:]);

#We run ICA twice to check for consistency.
transform = ICA(ht)

transform2 = ICA(ht)

#Fourier transforms
from scipy.fft import fft, fftfreq
N = ht.shape[0]
# sample spacing
T = 1.0/1000.0
y=ht.cpu().detach().numpy()[:,0]

#from scipy.signal import blackman
#w = blackman(N)
print(jp.shape)
yf = fft(jp.cpu().detach().numpy()[:,0])
#yf=np.zeros([yf.shape[0],20])
#for i in range(20):
 # yf[:,i] = fft(transform[:,i])
xf = fftfreq(N, T)[:N//2]
import matplotlib.pyplot as plt
plt.plot(xf, 2.0/N * np.abs(yf[0:N//2]))
plt.grid()
plt.show()

print(xf.shape)
print(yf.shape)

print(xf[np.argmax(yf[0:N//2])])

print(transform.shape)

plt.plot(range(ht.shape[0]),transform[:,3]);

plt.plot(range(ht.shape[0]),transform2[:,]);

print(bp[100300].shape)